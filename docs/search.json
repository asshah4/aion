[{"path":"https://asshah4.github.io/lazarus/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Anish Sanjay Shah Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://asshah4.github.io/lazarus/articles/recurrent_events.html","id":"traditional-model","dir":"Articles","previous_headings":"","what":"Traditional model","title":"Recurrent Event Analysis","text":"traditional survival analysis. requires almost formating, available thoroughness.","code":"trad_data <-   recur(     stress,     model_type = \"trad\",     id = \"id\",     left = \"start\",     right = \"stop\",     censor = \"death\"   )  head(trad_data) #> # A tibble: 6 × 7 #>      id status start  stop strata   date       events #>   <dbl>  <dbl> <dbl> <dbl> <chr>    <date>      <int> #> 1     1      0     0  1914 strata_0 2017-10-23      0 #> 2     2      0     0  1797 strata_0 2017-07-17      0 #> 3     3      0     0     2 strata_0 2012-08-29      0 #> 4     4      0     0  1776 strata_0 2017-07-10      0 #> 5     5      0     0  1780 strata_0 2017-07-20      0 #> 6     6      0     0  1753 strata_0 2017-07-10      0  # Now add back a covariate for analysis df <- merge(trad_data, stress[c(\"id\", \"broken_heart\")], by = \"id\", all.x = TRUE)  coxph(Surv(stop, status) ~ broken_heart, data = df) |>   summary() #> Call: #> coxph(formula = Surv(stop, status) ~ broken_heart, data = df) #>  #>   n= 98, number of events= 6  #>    (2 observations deleted due to missingness) #>  #>                 coef exp(coef) se(coef)      z Pr(>|z|) #> broken_heart -0.1294    0.8786   0.8166 -0.158    0.874 #>  #>              exp(coef) exp(-coef) lower .95 upper .95 #> broken_heart    0.8786      1.138    0.1773     4.354 #>  #> Concordance= 0.508  (se = 0.102 ) #> Likelihood ratio test= 0.03  on 1 df,   p=0.9 #> Wald test            = 0.03  on 1 df,   p=0.9 #> Score (logrank) test = 0.03  on 1 df,   p=0.9"},{"path":"https://asshah4.github.io/lazarus/articles/recurrent_events.html","id":"andersen-gill-model","dir":"Articles","previous_headings":"","what":"Andersen-Gill model","title":"Recurrent Event Analysis","text":"Andersen-Gill model generalization Cox model. common baseline hazard events, assumes constant hazard throughout time. highlights estimate intensity reucrrent events. can see, number rows increased, multiple events now subject. note, events given equal weight.","code":"ag_data <-   recur(     stress,     model_type = \"ag\",     id = \"id\",     left = \"start\",     right = \"stop\",     censor = \"death\",     event_dates = events   )  head(ag_data) #> # A tibble: 6 × 7 #>      id status start  stop strata   date       events #>   <dbl>  <dbl> <dbl> <dbl> <chr>    <date>      <int> #> 1     1      0     0  1914 strata_0 2017-10-23      0 #> 2     2      0     0  1797 strata_0 2017-07-17      0 #> 3     3      0     0     2 strata_0 2012-08-29      0 #> 4     4      0     0  1776 strata_0 2017-07-10      0 #> 5     5      0     0  1780 strata_0 2017-07-20      0 #> 6     6      0     0  1753 strata_0 2017-07-10      0 # Now add back a covariate for analysis df <- merge(ag_data, stress[c(\"id\", \"broken_heart\")], by = \"id\", all.x = TRUE)  coxph(   Surv(start, stop, status) ~ broken_heart,   method = \"breslow\",   data = df ) |>   summary() #> Warning in Surv(start, stop, status): Stop time must be > start time, NA created #> Call: #> coxph(formula = Surv(start, stop, status) ~ broken_heart, data = df,  #>     method = \"breslow\") #>  #>   n= 173, number of events= 87  #>    (18 observations deleted due to missingness) #>  #>                 coef exp(coef) se(coef)      z Pr(>|z|)     #> broken_heart -1.0597    0.3466   0.2370 -4.471 7.77e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #>              exp(coef) exp(-coef) lower .95 upper .95 #> broken_heart    0.3466      2.885    0.2178    0.5515 #>  #> Concordance= 0.632  (se = 0.028 ) #> Likelihood ratio test= 22.33  on 1 df,   p=2e-06 #> Wald test            = 19.99  on 1 df,   p=8e-06 #> Score (logrank) test = 21.93  on 1 df,   p=3e-06"},{"path":"https://asshah4.github.io/lazarus/articles/recurrent_events.html","id":"wei-lin-weissfield-or-marginal-model","dir":"Articles","previous_headings":"","what":"Wei-Lin-Weissfield or marginal model","title":"Recurrent Event Analysis","text":"model specifiy dependence structures amongst recurrent event times within subject. also baseline hazard assumption. However, max number events specified advance. tend use dependence structure complex unknown (may matter). strata now recurring events.","code":"marg_data <-   recur(     stress,     model_type = \"marginal\",     id = \"id\",     left = \"start\",     right = \"stop\",     censor = \"death\",     event_dates = events   )  head(marg_data) #> # A tibble: 6 × 7 #>      id status start  stop strata   date       events #>   <dbl>  <dbl> <dbl> <dbl> <chr>    <date>      <int> #> 1     1      0     0  1914 strata_0 2017-10-23      0 #> 2     2      0     0  1797 strata_0 2017-07-17      0 #> 3     3      0     0     2 strata_0 2012-08-29      0 #> 4     4      0     0  1776 strata_0 2017-07-10      0 #> 5     5      0     0  1780 strata_0 2017-07-20      0 #> 6     6      0     0  1753 strata_0 2017-07-10      0  unique(marg_data$strata) #> [1] \"strata_0\" \"strata_1\" \"strata_2\" \"strata_3\" \"strata_4\" \"strata_5\" # Now add back a covariate for analysis df <- merge(marg_data, stress[c(\"id\", \"broken_heart\")], by = \"id\", all.x = TRUE)  coxph(   Surv(start, stop, status) ~ broken_heart + cluster(id),   robust = TRUE,   method = \"breslow\",   data = df ) |>   summary() #> Warning in Surv(start, stop, status): Stop time must be > start time, NA created #> Call: #> coxph(formula = Surv(start, stop, status) ~ broken_heart, data = df,  #>     robust = TRUE, method = \"breslow\", cluster = id) #>  #>   n= 180, number of events= 90  #>    (11 observations deleted due to missingness) #>  #>                 coef exp(coef) se(coef) robust se      z Pr(>|z|)    #> broken_heart -0.6795    0.5069   0.2306    0.2476 -2.744  0.00607 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #>              exp(coef) exp(-coef) lower .95 upper .95 #> broken_heart    0.5069      1.973     0.312    0.8235 #>  #> Concordance= 0.572  (se = 0.03 ) #> Likelihood ratio test= 9.35  on 1 df,   p=0.002 #> Wald test            = 7.53  on 1 df,   p=0.006 #> Score (logrank) test = 9.02  on 1 df,   p=0.003,   Robust = 9.93  p=0.002 #>  #>   (Note: the likelihood ratio and score tests assume independence of #>      observations within a cluster, the Wald and robust score tests do not)."},{"path":"https://asshah4.github.io/lazarus/articles/recurrent_events.html","id":"prentice-williams-peterson-pwp-model","dir":"Articles","previous_headings":"","what":"Prentice, Williams, Peterson (PWP) model","title":"Recurrent Event Analysis","text":"PWP orders events strata, counts subjects risk first event. , includes risk subjects already event subsequent strata. two methods use total time time events measure time. strata events can effect start time risk event model type. show cases findings total time part risk. use gap time.","code":"total_data <-   recur(     stress,     model_type = \"pwptt\",     id = \"id\",     left = \"start\",     right = \"stop\",     censor = \"death\",     event_dates = events   )  tail(total_data) #> # A tibble: 6 × 7 #>      id status start  stop strata   date       events #>   <dbl>  <dbl> <dbl> <dbl> <chr>    <date>      <int> #> 1   283      1     0    99 strata_0 2016-01-19      0 #> 2   284      0     0   796 strata_0 2017-12-19      0 #> 3   287      1     0   131 strata_1 2016-02-27      1 #> 4   287      0   131   865 strata_0 2018-03-02      1 #> 5   311      0     0   728 strata_0 2018-01-23      0 #> 6   321      0     0   680 strata_0 2018-01-12      0  gap_data <-   recur(     stress,     model_type = \"pwpgt\",     id = \"id\",     left = \"start\",     right = \"stop\",     censor = \"death\",     event_dates = events   )  tail(gap_data) #> # A tibble: 6 × 7 #>      id status start  stop strata   date       events #>   <dbl>  <dbl> <dbl> <dbl> <chr>    <date>      <int> #> 1   283      1     0    99 strata_0 2016-01-19      0 #> 2   284      0     0   796 strata_0 2017-12-19      0 #> 3   287      1     0   131 strata_1 2016-02-27      1 #> 4   287      0     0   734 strata_0 2018-03-02      1 #> 5   311      0     0   728 strata_0 2018-01-23      0 #> 6   321      0     0   680 strata_0 2018-01-12      0 # Now add back a covariate for analysis df <- merge(total_data, stress[c(\"id\", \"broken_heart\")], by = \"id\", all.x = TRUE)  coxph(   Surv(start, stop, status) ~ broken_heart + cluster(id) + strata(strata),   robust = TRUE,   method = \"breslow\",   data = df ) |>   summary() #> Warning in Surv(start, stop, status): Stop time must be > start time, NA created #> Call: #> coxph(formula = Surv(start, stop, status) ~ broken_heart + strata(strata),  #>     data = df, robust = TRUE, method = \"breslow\", cluster = id) #>  #>   n= 173, number of events= 87  #>    (18 observations deleted due to missingness) #>  #>                 coef exp(coef) se(coef) robust se      z Pr(>|z|) #> broken_heart -0.2337    0.7916   0.2705    0.2402 -0.973    0.331 #>  #>              exp(coef) exp(-coef) lower .95 upper .95 #> broken_heart    0.7916      1.263    0.4943     1.268 #>  #> Concordance= 0.51  (se = 0.034 ) #> Likelihood ratio test= 0.77  on 1 df,   p=0.4 #> Wald test            = 0.95  on 1 df,   p=0.3 #> Score (logrank) test = 0.75  on 1 df,   p=0.4,   Robust = 0.87  p=0.4 #>  #>   (Note: the likelihood ratio and score tests assume independence of #>      observations within a cluster, the Wald and robust score tests do not). # Now add back a covariate for analysis df <- merge(gap_data, stress[c(\"id\", \"broken_heart\")], by = \"id\", all.x = TRUE)  coxph(   Surv(start, stop, status) ~ broken_heart + cluster(id) + strata(strata),   robust = TRUE,   method = \"breslow\",   data = df ) |>   summary() #> Warning in Surv(start, stop, status): Stop time must be > start time, NA created #> Call: #> coxph(formula = Surv(start, stop, status) ~ broken_heart + strata(strata),  #>     data = df, robust = TRUE, method = \"breslow\", cluster = id) #>  #>   n= 173, number of events= 87  #>    (18 observations deleted due to missingness) #>  #>                 coef exp(coef) se(coef) robust se     z Pr(>|z|) #> broken_heart 0.01515   1.01526  0.25229   0.23920 0.063     0.95 #>  #>              exp(coef) exp(-coef) lower .95 upper .95 #> broken_heart     1.015      0.985    0.6353     1.623 #>  #> Concordance= 0.501  (se = 0.035 ) #> Likelihood ratio test= 0  on 1 df,   p=1 #> Wald test            = 0  on 1 df,   p=0.9 #> Score (logrank) test = 0  on 1 df,   p=1,   Robust = 0  p=0.9 #>  #>   (Note: the likelihood ratio and score tests assume independence of #>      observations within a cluster, the Wald and robust score tests do not)."},{"path":"https://asshah4.github.io/lazarus/articles/recurrent_events.html","id":"additional-methods","dir":"Articles","previous_headings":"","what":"Additional methods","title":"Recurrent Event Analysis","text":"Multi-state models Frailty models expand future.","code":""},{"path":"https://asshah4.github.io/lazarus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anish Shah. Author, maintainer.","code":""},{"path":"https://asshah4.github.io/lazarus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shah (2022). lazarus: Recurrent events. R package version 0.0.0.9000, https://github.com/asshah4/lazarus.","code":"@Manual{,   title = {lazarus: Recurrent events},   author = {Anish Shah},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/asshah4/lazarus}, }"},{"path":"https://asshah4.github.io/lazarus/index.html","id":"lazarus","dir":"","previous_headings":"","what":"Recurrent events","title":"Recurrent events","text":"goal lazarus provide tools allow data tidying analysis recurrent events longitudinal outcomes. name comes story /mythology Lazarus, man died brought back life.","code":""},{"path":"https://asshah4.github.io/lazarus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Recurrent events","text":"can install released version lazarus CRAN : development version GitHub :","code":"#install.packages(\"lazarus\") # install.packages(\"devtools\") devtools::install_github(\"asshah4/lazarus\")"},{"path":"https://asshah4.github.io/lazarus/reference/recur.html","id":null,"dir":"Reference","previous_headings":"","what":"Recurrent Survival Data Format — recur","title":"Recurrent Survival Data Format — recur","text":"Reformats recurrent event data (wide) different models survival analysis, can also used simple survival analysis tables well. general format data tends collected. left right censoring date, labeled event column contains date event, censoring column final censoring event. accepted parameter options listed, type table generated: traditional: Traditional survival table single censoring event (trad) counting : Formally called Andersen Gill model (ag). Counting process model assumes event independent subject contributes risk set time observation. Multiple events treated new (delayed) entry followed next event. means subjects observation risk second event, even without prior event. thus strata model. marginal: Formally called Wei-Lin-Weissfield model, commonly known marginal model (marginal). Marginal models assumes event separate process. subject risk events. time event starts beginning follow-subject. Thus, risk period considered different strata (regardless subject event ). conditional : Formally called Prentice, Williams, Peterson total time model (pwptt). Conditional models order events stratification, based number events prior. subjects risk left strata, previous event risk successive event. total time event used. conditional B: Formally called Prentice, Williams, Peterson gap time model (pwpgt). Conditional B models also order events strata (like conditional ), however time outcome defined gap time previous event.","code":""},{"path":"https://asshah4.github.io/lazarus/reference/recur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recurrent Survival Data Format — recur","text":"","code":"recur(data, model_type, id, left, right, censor = NULL, event_dates = NULL)"},{"path":"https://asshah4.github.io/lazarus/reference/recur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recurrent Survival Data Format — recur","text":"data dataframe containing subsequent parameters model_type Model type indicated: trad makes traditional survival table ag makes table risk periods starting time prior event without conditional strata marginal makes table risk periods entry censorship strata per event pwptt makes table risk periods starting time prior event conditional strata pwpgt makes table risk periods time interval events,  conditional strata id Column dataframe contains unique IDs row left Column left/enrollment dates right Column right/censoring time point, right contact censor Column names death/final censorship known (0 1). default , censorship information given, failure events time right contact. censor required recurrent event analysis, required traditional survival tables. event_dates Vector columns contain event dates","code":""},{"path":"https://asshah4.github.io/lazarus/reference/recur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recurrent Survival Data Format — recur","text":"data frame organized survival table format. Output options Details. Generally, following columns generated: id: ID column created start: formatted start time, usually 0 stop: formatted stop time, days, prior event status: event occurred strata: Event strata applied","code":""},{"path":"https://asshah4.github.io/lazarus/reference/recur.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recurrent Survival Data Format — recur","text":"function takes every event date, creates several types recurrent event tables. orders data chronologically repeat events. Currently normal (left event) recurrent models (counting, marginal, conditional B models). details can found IDRE. recurrent events, final censoring event can include death, can ignored considered failure event. traditional survival analysis, censor required event_dates left NULL. function rest. Performance: Importantly, large datasets recurrent data (>500 rows), function show significant slow-since uses intuitive approach defining datasets. Future iterations create vectorized approach provide performance speed-ups.","code":""},{"path":"https://asshah4.github.io/lazarus/reference/recur.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recurrent Survival Data Format — recur","text":"","code":"# \\donttest{ # Data data(\"mims\") #> Warning: data set ‘mims’ not found  # Parameters id <- \"patid\" left <- \"left_visit_date_bl\" right <- \"ldka\" event_dates <- c(\"mi_date_1\", \"mi_date_2\", \"mi_date_3\") model_type <- \"marginal\" censor <- \"DEATH_CV_YN\"  # Run analysis out <- recur(   mims, model_type, id, left, right, censor, event_dates ) #> Error in id %in% names(data): object 'mims' not found # }"}]
